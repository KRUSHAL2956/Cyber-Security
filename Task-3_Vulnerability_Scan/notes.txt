VULNERABILITY SCANNING - LEARNING NOTES
Task 3: OpenVAS Practical
KRUSHAL - October 24, 2025

================================================================================

WHAT IS VULNERABILITY SCANNING?

Automated process to identify security weaknesses in systems. Like a health
checkup for computers - scanner probes the system looking for known issues.

================================================================================

KEY CONCEPTS

CVE (Common Vulnerabilities and Exposures)
- Standardized ID for known vulnerabilities
- Example: CVE-1999-0524

CVSS (Scoring System)
- 0.1-3.9: Low
- 4.0-6.9: Medium  
- 7.0-8.9: High
- 9.0-10.0: Critical

NVT (Network Vulnerability Tests)
- Test scripts that check for specific vulnerabilities
- OpenVAS uses thousands of NVTs

================================================================================

HOW SCANNING WORKS

1. Target Discovery - Find live hosts (ICMP, TCP)
2. Port Scanning - Check all 65,535 ports
3. Service Detection - Banner grabbing, identify versions
4. Vulnerability Matching - Compare with CVE database
5. Active Testing - Send test packets
6. Results Analysis - Generate report with CVSS scores

Detection Methods:
- Banner Grabbing: Read service headers
- OS Fingerprinting: Analyze TCP/IP behavior
- Version Probing: Check software versions
- Active Testing: Try safe exploits

================================================================================

FINDINGS EXPLAINED

TCP Timestamps (CVSS 2.6 - Low)
- TCP packets contain timestamp values
- Reveals system uptime = Timestamp / Drift rate
- Shows when system was last patched/rebooted
- Info disclosure but not directly exploitable

ICMP Timestamps (CVE-1999-0524, CVSS 2.1 - Low)
- System responds to ICMP Type 13 requests
- Reveals clock time and uptime
- Unnecessary information leakage
- Common on most systems by default

Apache Version Issue
- Running 2.4.58, current is 2.4.62 (4 versions behind)
- 20 known CVEs exist in database
- Scan didn't flag them (not actively exploitable)
- But vulnerabilities still exist in code
- Lesson: Keep software updated!

================================================================================

SCANNING METHODOLOGY

Phase 1: Preparation
- Install OpenVAS/Greenbone
- Update feeds (NVT, SCAP, CERT)
- Verify all feeds show "Current"

Phase 2: Configuration  
- Create target (use actual IP, not 127.0.0.1)
- Select "Full and Fast" scan profile
- Choose port list (All IANA TCP)

Phase 3: Execution & Analysis
- Run scan and wait for completion
- Check filter settings (include Log level: hmlgdf)
- Review results by severity
- Research CVEs for context
- Document findings

Important: Get permission before scanning! Unauthorized scanning is illegal.

================================================================================

SECURITY BEST PRACTICES

Port Security:
- Only expose necessary ports
- Bind services to localhost when possible
- Use firewall rules

Version Management:
- Keep all software updated
- Subscribe to security advisories
- Track installed versions

Regular Scanning:
- Schedule monthly scans
- Compare results over time
- Update feeds regularly

Defense in Depth:
- Layer multiple protections
- Firewall + Updates + Monitoring + Scanning

================================================================================

OPENVAS TOOL

Components:
- gvmd: Vulnerability Manager daemon
- ospd-openvas: Scanner wrapper
- PostgreSQL: Database
- Web interface on port 9392

Feed Types:
- NVT: Scan scripts
- SCAP: CVE/CPE data
- CERT: Security advisories
- GVMD_DATA: Configs

Alternative Tools:
- Nessus (commercial, user-friendly)
- Qualys (cloud-based)
- Nmap (lightweight, free)

================================================================================

UNDERSTANDING RESULTS

Quality of Detection (QoD):
- 95-100%: Exploit verified
- 80-94%: Authenticated check
- 70-79%: Banner check
- Below 50%: Low confidence

================================================================================

RISK PRIORITIZATION

Consider these factors:
1. CVSS Score
2. Exploitability (public exploits)
3. Attack Surface (internet-facing?)
4. Data Sensitivity
5. Ease of Fix

Example: Critical CVSS + Internet-facing + Easy fix = Top priority

================================================================================

KEY LESSONS

Technical:
- Automated tools are necessary but not sufficient
- Version management is crucial
- Default configurations matter
- Regular scanning catches issues early

Security Mindset:
- Assume systems have vulnerabilities
- Security is continuous, not one-time
- Balance security with usability
- Stay informed about new threats
